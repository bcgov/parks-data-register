AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  pdr-admin

  SAM Template for Angular Admin Frontend

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Parameters:
  ProjectName:
    Type: String
    Description: Name of the project.
  Env:
    Type: String
    Description: Staging environment.
  AWSRegion:
    Type: String
    Default: ca-central-1
    Description: AWS Region.
  BaseHref:
    Type: String
    Default: admin/
    Description: Base href to use for cloudfront.
  DistOriginPath:
    Type: String
    Default: latest
    Description: Cloudfront distribution origin path.
  ApiGatewayId:
    Type: String
    Description: ID for rest API.
  ApiStage:
    Type: String
    Default: api
    Description: API stage.
  EnvDomainName:
    Type: String
    Default: ''
    Description: (Optional) Custom domain name for this environment (e.g., dev-data.bcparks.ca, data.bcparks.ca). Leave empty to use CloudFront default domain.
  CreateCertificate:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Whether to create a new ACM certificate or use an existing one. Set to 'false' if certificate already exists or not using custom domain.
  ExistingCertificateArn:
    Type: String
    Default: ''
    Description: (Optional) ARN of existing ACM certificate in us-east-1. Only used if CreateCertificate is 'false' and EnvDomainName is set.
  HostedZoneId:
    Type: String
    Default: ''
    Description: Route53 Hosted Zone ID for DNS validation of the certificate. Required if CreateCertificate is 'true'.

Conditions:
  ShouldCreateCertificate: !Equals [!Ref CreateCertificate, 'true']
  UseCustomDomain: !Not [!Equals [!Ref EnvDomainName, '']]

Resources:
  # ACM Certificate must be in us-east-1 for CloudFront
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Condition: ShouldCreateCertificate
    Properties:
      DomainName: !Ref EnvDomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref EnvDomainName
          HostedZoneId: !Ref HostedZoneId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-certificate
        - Key: Environment
          Value: !Ref Env

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: CloudFront access identity

  CloudFrontAPICachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: "Custom CloudFront Caching Policy to allow the Authorization header through to the Origins."
        DefaultTTL: 1
        MaxTTL: 1
        MinTTL: 1
        Name: !Sub ${ApiGatewayId}-CFCachePolicy
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Authorization
              - X-Api-Key
          QueryStringsConfig:
            QueryStringBehavior: all

  # CloudFront Function to rewrite /api/* to /* for API Gateway
  ApiUrlRewriteFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub ${AWS::StackName}-api-rewrite
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
          var request = event.request;
          // Rewrite /api/* to /* for API Gateway
          request.uri = request.uri.replace(/^\/api/, '');
          return request;
        }
      FunctionConfig:
        Comment: Rewrites /api/* paths to /* for API Gateway origin
        Runtime: cloudfront-js-1.0

  # NOTE: Lambda@Edge solution removed due to SAM cross-region deployment limitations
  # Lambda@Edge functions must be in us-east-1, but SAM deploys to ca-central-1
  # ISSUE: CloudFront custom error responses catch API Gateway 403/404 errors
  # and return HTML instead of JSON. This affects API authentication failures.
  # WORKAROUND: Frontend should handle HTML responses gracefully or retry.

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Restrictions:
          GeoRestriction:
            RestrictionType: blacklist
            # Belarus, Central African Republic, China, Democratic Republic of the Congo, Iran, Iraq, Democratic People's Republic of Korea, Lebanon, Libya, Mali, Myanmar, Nicaragua, Russia, Somalia, South Sudan, Sudan, Syria, Ukraine, Venezuela, Yemen, Zimbabwe
            Locations: [BY, CF, CN, CD, IR, IQ, KP, LB, LY, ML, MM, NI, RU, SO, SS, SD, SY, UA, VE, YE, ZW]
        PriceClass: PriceClass_100
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: !Sub /${BaseHref}index.html
            ErrorCachingMinTTL: 0
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: !Sub /${BaseHref}index.html
            ErrorCachingMinTTL: 0
        Aliases: !If
          - UseCustomDomain
          - [!Ref EnvDomainName]
          - !Ref AWS::NoValue
        ViewerCertificate: !If
          - UseCustomDomain
          - AcmCertificateArn: !If
              - ShouldCreateCertificate
              - !Ref Certificate
              - !Ref ExistingCertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1
          - CloudFrontDefaultCertificate: true
        Comment: !Sub "CloudFront distribution for ${AWS::StackName}"
        DefaultRootObject: !Sub ${BaseHref}index.html
        Enabled: true
        HttpVersion: http2
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: !Ref DistS3Bucket
            DomainName: !GetAtt DistS3Bucket.RegionalDomainName
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
            OriginPath: !Sub /${DistOriginPath}
          - Id: !Sub ${ApiGatewayId}
            DomainName: !Sub "${ApiGatewayId}.execute-api.${AWSRegion}.amazonaws.com"
            OriginPath: !Sub /${ApiStage}
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: true
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          # CachingDisabled
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          TargetOriginId: !Ref DistS3Bucket
          ViewerProtocolPolicy: redirect-to-https
          # Simple CORS
          ResponseHeadersPolicyId: 60669652-455b-4ae9-85a4-c4c02393f86c
        CacheBehaviors:
          - PathPattern: /api/*
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            # CachingDisabled
            CachePolicyId: !Ref CloudFrontAPICachePolicy
            TargetOriginId: !Sub ${ApiGatewayId}
            ViewerProtocolPolicy: redirect-to-https
            # Simple CORS
            ResponseHeadersPolicyId: 60669652-455b-4ae9-85a4-c4c02393f86c
            FunctionAssociations:
              - EventType: viewer-request
                FunctionARN: !GetAtt ApiUrlRewriteFunction.FunctionMetadata.FunctionARN
          - PathPattern: !Sub ${BaseHref}*
            Compress: true
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            # CachingDisabled
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            TargetOriginId: !Ref DistS3Bucket
            ViewerProtocolPolicy: redirect-to-https
            # Simple CORS
            ResponseHeadersPolicyId: 60669652-455b-4ae9-85a4-c4c02393f86c
        Logging:
          Bucket: !GetAtt LogsS3Bucket.DomainName
          IncludeCookies: false
          Prefix: !Sub ${AWS::StackName}-${Env}-logs

  DistS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-${Env}

  DistS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DistS3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${DistS3Bucket}/*"

  LogsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-${Env}-logs
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred

  LogsS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogsS3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${LogsS3Bucket}/*"

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  Website:
    Value: !GetAtt CloudFrontDistribution.DomainName
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution
