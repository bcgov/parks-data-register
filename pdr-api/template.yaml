AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  pdr-api
  SAM deployment for Parks Data Register API

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  Stage:
    Type: String
    Default: v1

Resources:
  ### LAMBDA LAYERS ###
  BaseLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: base
      Description: Parks Data Register Base Layer
      ContentUri: layers/base/
      CompatibleRuntimes:
        - nodejs14.x
        - nodejs16.x
        - nodejs18.x
      LicenseInfo: "MIT"
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  DynamoDBLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dynamodb
      Description: Parks Data Register DynamoDB Utilities Layer
      ContentUri: layers/dynamodb/
      CompatibleRuntimes:
        - nodejs14.x
        - nodejs16.x
        - nodejs18.x
      LicenseInfo: "MIT"
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  PermissionsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: permissions
      Description: Parks Data Register Permissions Utilities Layer
      ContentUri: layers/permissions/
      CompatibleRuntimes:
        - nodejs14.x
        - nodejs16.x
        - nodejs18.x
      LicenseInfo: "MIT"
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  ### LAMBDA FUNCTIONS ###

  # Config
  ConfigGetLambda:
    FunctionName: ConfigGet
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/config/GET/
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref DynamoDBLayer
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Config GET lambda function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ParksDataRegisterMainTable
      Events:
        ConfigGet:
          Type: Api
          Properties:
            Path: /config
            Method: GET
            RestApiId: !Ref ApiDeployment

  ConfigPostLambda:
    FunctionName: ConfigPost
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/config/POST/
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref DynamoDBLayer
        - !Ref PermissionsLayer
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Config POST lambda function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ParksDataRegisterMainTable
      Events:
        HelloWorldPost:
          Type: Api
          Properties:
            Path: /config
            Method: POST
            RestApiId: !Ref ApiDeployment

  ### DYNAMODB TABLES ###
  ParksDataRegisterMainTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: pdr-main
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  ### API ###
  ApiDeployment:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage

  # ParksDataRegisterMetaTable:
  #   Type: AWS::DynamoDB::Table
  #   DeletionPolicy: Retain
  #   Properties:
  #     TableName: pdr-meta
  #     AttributeDefinitions:
  #       - AttributeName: pk
  #         AttributeType: S
  #       - AttributeName: sk
  #         AttributeType: S
  #     KeySchema:
  #       - AttributeName: pk
  #         KeyType: HASH
  #       - AttributeName: sk
  #         KeyType: RANGE
  #     BillingMode: PAY_PER_REQUEST
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 0
  #       WriteCapacityUnitys: 0

Outputs:
  #   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  #   # Find out more about other implicit resources you can reference within SAM
  #   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ApiDeployment:
    Description: "API Gateway endpoint URL for Stage for Config function"
    Value: !Sub "https://${ApiDeployment}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/config/"
