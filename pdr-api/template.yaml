AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  pdr-api SAM deployment for Parks Data Register API


# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        SSO_ISSUER: !Ref SSOIssuerUrl
        SSO_JWKSURI: !Ref SSOJWKSUri
        IS_OFFLINE: false
        DYNAMODB_ENDPOINT_URL: dynamodb.ca-central-1.amazonaws.com

Parameters:
  Env:
    Description: Environment name (e.g., lza-dev, lza-test)
    Type: String
    Default: 'lza-dev'
  TableNameRegister:
    Type: String
    Default: 'NameRegister'
  TableNameAudit:
    Type: String
    Default: 'Audit'
  AccountId:
    Type: String
    Default: '970582042516'
  Stage:
    Type: String
    Default: api
  DomainName:
    Description: User-defined OpenSearch domain name
    Type: String
    Default: 'data-register'
  OpenSearchSecondaryDomainName:
    Description: OpenSearch domain name (max 28 chars when combined with -Env suffix)
    Type: String
    Default: 'data-register-opensearch'
  KMSKeyId:
    Type: String
    Default: 'arn:aws:kms:ca-central-1:970582042516:alias/aws/es'
  InstanceCount:
    Type: Number
    Default: 1
  InstanceType:
    Type: String
    Default: 't3.small.search'
  OpenSearchMainIndex:
    Type: String
    Default: 'main-index'
  EBSIops:
    Type: String
    Default: 1000
  SSOIssuerUrl:
    Type: String
    Default: https://dev.loginproxy.gov.bc.ca/auth/realms/bcparks-service-transformation
  SSOJWKSUri:
    Type: String
    Default: https://dev.loginproxy.gov.bc.ca/auth/realms/bcparks-service-transformation/protocol/openid-connect/certs

Resources:

  ## Roles
  StreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole'
      Policies:
        - PolicyName: 'ProcessDynamoDBStreamRolePolicyOne'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Action:
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:BatchGetItem
                  - dynamodb:DescribeTable
                  - dynamodb:ConditionCheckItem
                Resource: !Sub
                  - 'arn:aws:dynamodb:ca-central-1:${AccountId}:table/Audit'
                  - AccountId: !Ref AccountId
                Effect: Allow
        - PolicyName: 'ProcessDynamoDBStreamRolePolicyTwo'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Action:
                  - es:ESHttpPost
                  - es:ESHttpPut
                Resource: !Sub
                  - 'arn:aws:es:ca-central-1:${AccountId}:domain/${DomainName}/*'
                  - AccountId: !Ref AccountId
                    DomainName: !Ref OpenSearchSecondaryDomainName
                Effect: Allow

  ## Opensearch
  OpenSearch:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: !Sub '${DomainName}-${Env}'
      ClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: !Ref InstanceCount
        InstanceType: !Ref InstanceType
        MultiAZWithStandbyEnabled: false
        WarmEnabled: false
        ZoneAwarenessEnabled: false
      NodeToNodeEncryptionOptions:
        Enabled: true
      EncryptionAtRestOptions:
        Enabled: true
        KmsKeyId: !Ref KMSKeyId
      DomainEndpointOptions:
        EnforceHTTPS: true
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: false
        MasterUserOptions:
          MasterUserARN: !GetAtt StreamRole.Arn
      EBSOptions:
        EBSEnabled: true
        Iops: !Ref EBSIops
        VolumeSize: '10'
        Throughput: '125'
        VolumeType: 'gp3'
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: !GetAtt StreamRole.Arn

  ## Opensearch
  OpenSearchSecondary:
    Type: AWS::OpenSearchService::Domain
    DependsOn: StreamRole
    Properties:
      DomainName: !Sub '${OpenSearchSecondaryDomainName}-${Env}'
      ClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: !Ref InstanceCount
        InstanceType: !Ref InstanceType
        MultiAZWithStandbyEnabled: false
        WarmEnabled: false
        ZoneAwarenessEnabled: false
      NodeToNodeEncryptionOptions:
        Enabled: true
      EncryptionAtRestOptions:
        Enabled: true
        KmsKeyId: !Ref KMSKeyId
      DomainEndpointOptions:
        EnforceHTTPS: true
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: false
        MasterUserOptions:
          MasterUserARN: !GetAtt StreamRole.Arn
      EBSOptions:
        EBSEnabled: true
        Iops: !Ref EBSIops
        VolumeSize: '10'
        Throughput: '125'
        VolumeType: 'gp3'
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: !GetAtt StreamRole.Arn

  ### LAMBDA LAYERS ###
  BaseLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: base
      Description: Common Base Tooling Layer
      ContentUri: layers/base/
      CompatibleRuntimes:
        - nodejs20.x
      LicenseInfo: 'Apache-2.0'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  AWSUtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: awsUtils
      Description: Common AWS Tooling Layer
      ContentUri: layers/awsUtils/
      CompatibleRuntimes:
        - nodejs20.x
      LicenseInfo: 'Apache-2.0'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  DataUtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dataUtils
      Description: Utilities, tools and helper functions specific to PDR data
      ContentUri: layers/dataUtils/
      CompatibleRuntimes:
        - nodejs20.x
      LicenseInfo: 'Apache-2.0'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  ### LAMBDA FUNCTIONS ###

  SearchFunction:
    FunctionName: SearchFunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/search
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
      Role: !GetAtt StreamRole.Arn
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 7
      Description: Search Handler
      Policies:
        - ElasticsearchHttpPostPolicy:
            DomainName: !Ref OpenSearchSecondaryDomainName
      Environment:
        Variables:
          LOG_LEVEL: info
          OPENSEARCH_MAIN_INDEX: !Ref OpenSearchMainIndex
          OPENSEARCH_DOMAIN_ENDPOINT: !Sub
            - 'https://${Domain}/'
            - Domain: !GetAtt OpenSearchSecondary.DomainEndpoint
      Events:
        SearchGet:
          Type: Api
          Properties:
            Path: /search
            Method: GET
            RestApiId: !Ref ApiDeployment
        SearchOptions:
          Type: Api
          Properties:
            Path: /search
            Method: OPTIONS
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  ChangelogSearchFunction:
    FunctionName: ChangelogSearchFunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/changelog/search
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
      Role: !GetAtt StreamRole.Arn
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 7
      Description: Changelog Search Handler
      Policies:
        - ElasticsearchHttpPostPolicy:
            DomainName: !Ref OpenSearchSecondaryDomainName
      Environment:
        Variables:
          LOG_LEVEL: info
          OPENSEARCH_MAIN_INDEX: !Ref OpenSearchMainIndex
          OPENSEARCH_DOMAIN_ENDPOINT: !Sub
            - 'https://${Domain}/'
            - Domain: !GetAtt OpenSearchSecondary.DomainEndpoint
      Events:
        ChangelogSearchGet:
          Type: Api
          Properties:
            Path: /changelog/search
            Method: GET
            RestApiId: !Ref ApiDeployment
        ChangelogSearchOptions:
          Type: Api
          Properties:
            Path: /changelog/search
            Method: OPTIONS
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  # Config
  ConfigGet:
    FunctionName: ConfigGet
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/config/GET
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Config GET lambda function
      Environment:
        Variables:
          TABLE_NAME: !Ref TableNameRegister
          LOG_LEVEL: info
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNameRegister
      Events:
        ConfigGet:
          Type: Api
          Properties:
            Path: /config
            Method: GET
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true
        ConfigOptions:
          Type: Api
          Properties:
            Path: /config
            Method: OPTIONS
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  # ParksAllNamesGet
  ParksAllNamesGet:
    FunctionName: ParksAllNamesGet
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/parks/names/GET
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: All Park Names GET lambda function
      Environment:
        Variables:
          TABLE_NAME: !Ref TableNameRegister
          LOG_LEVEL: info
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNameRegister
      Events:
        ParksAllNamesGet:
          Type: Api
          Properties:
            Path: /parks/names
            Method: GET
            RestApiId: !Ref ApiDeployment
        ParksAllNamesOptions:
          Type: Api
          Properties:
            Path: /parks/names
            Method: OPTIONS
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  # ParkNameGet
  ParkNameGet:
    FunctionName: ParkNameGet
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/parks/_identifier/name/GET
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Park Name GET lambda function
      Environment:
        Variables:
          TABLE_NAME: !Ref TableNameRegister
          LOG_LEVEL: info
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNameRegister
      Events:
        ParkNameGet:
          Type: Api
          Properties:
            Path: /parks/{identifier}/name
            Method: GET
            RestApiId: !Ref ApiDeployment
        ParkNameOptions:
          Type: Api
          Properties:
            Path: /parks/{identifier}/name
            Method: OPTIONS
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  # ParkNamePut
  ParkNamePut:
    FunctionName: ParkNamePut
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/parks/_identifier/name/PUT
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
        - !Ref DataUtilsLayer
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Park Name PUT lambda function
      Environment:
        Variables:
          TABLE_NAME: !Ref TableNameRegister
          LOG_LEVEL: info
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNameRegister
      Events:
        ParkNamePut:
          Type: Api
          Properties:
            Path: /parks/{identifier}/name
            Method: PUT
            RestApiId: !Ref ApiDeployment

### FeeGet
  FeeGet:
    FunctionName: FeeGet
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/fees/GET
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Park FEES GET lambda function
      Environment:
        Variables:
          TABLE_NAME: !Ref TableNameRegister
          LOG_LEVEL: info
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNameRegister
      Events:
        ParkFeeGet:
          Type: Api
          Properties:
            Path: /fees
            Method: GET
            RestApiId: !Ref ApiDeployment

### FeePost
  FeePost:
    FunctionName: FeePost
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/fees/POST
      Handler: index.handler
      Layers:
        - !Ref DataUtilsLayer
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Park FEES POST lambda function
      Environment:
        Variables:
          TABLE_NAME: !Ref TableNameRegister
          LOG_LEVEL: info
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNameRegister
      Events:
        ParkFeeGet:
          Type: Api
          Properties:
            Path: /fees
            Method: POST
            RestApiId: !Ref ApiDeployment


### FeeDelete
  FeeDelete:
    FunctionName: FeeDelete
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/fees/DELETE
      Handler: index.handler
      Layers:
        - !Ref DataUtilsLayer
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Park FEES DELETE lambda function
      Environment:
        Variables:
          TABLE_NAME: !Ref TableNameRegister
          LOG_LEVEL: info
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNameRegister
      Events:
        ParkFeeGet:
          Type: Api
          Properties:
            Path: /fees
            Method: DELETE
            RestApiId: !Ref ApiDeployment


  ### FeePut
  FeePut:
    FunctionName: FeePut
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/fees/PUT
      Handler: index.handler
      Layers:
        - !Ref DataUtilsLayer
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Park FEES PUT lambda function
      Environment:
        Variables:
          TABLE_NAME: !Ref TableNameRegister
          LOG_LEVEL: info
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNameRegister
      Events:
        ParkFeePut:
          Type: Api
          Properties:
            Path: /fees
            Method: PUT
            RestApiId: !Ref ApiDeployment

  ### API ###
  ApiDeployment:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'POST,GET,OPTIONS,PUT'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for the Data Register
          Quota:
            Limit: 1000
            Period: DAY
          Throttle:
            BurstLimit: 100
            RateLimit: 50
        DefaultAuthorizer: KCAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          KCAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt Authorizer.Arn
            Identity:
              Headers:
                - Authorization

  ### DYNAMODB TABLES ###
  ProcessDynamoDBStream:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/dynamoStream/
      Handler: index.handler
      Role: !GetAtt StreamRole.Arn
      MemorySize: 512
      Timeout: 60
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
      Runtime: nodejs20.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNameRegister
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNameAudit
        - ElasticsearchHttpPostPolicy:
            DomainName: !Ref OpenSearchSecondaryDomainName
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt NameRegister.StreamArn
            BatchSize: 10
            StartingPosition: TRIM_HORIZON
      Environment:
        Variables:
          LOG_LEVEL: info
          OPENSEARCH_MAIN_INDEX: !Ref OpenSearchMainIndex
          OPENSEARCH_DOMAIN_ENDPOINT: !Sub
            - 'https://${Domain}/'
            - Domain: !GetAtt OpenSearchSecondary.DomainEndpoint

  ### AUTHORIZER ###
  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/authorizer/
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
      Runtime: nodejs20.x
      Environment:
        Variables:
          LOG_LEVEL: info
          SSO_ISSUER: !Ref SSOIssuerUrl
          SSO_JWKSURI: !Ref SSOJWKSUri

  NameRegister:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: legalName
          AttributeType: S
        - AttributeName: displayName
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: ByLegalName
          KeySchema:
            - AttributeName: legalName
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: ByDisplayName
          KeySchema:
            - AttributeName: displayName
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: ByStatusOfOrcs
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: pk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      TableName: !Ref TableNameRegister
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  Audit:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: gsipk
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: gsi1
          KeySchema:
            - AttributeName: gsipk
              KeyType: HASH
            - AttributeName: pk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      TableName: !Ref TableNameAudit
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
    DependsOn: NameRegister

  # Get sites by park id
  ParkSitesGet:
    FunctionName: ParkSitesGet
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/parks/_identifier/sites/GET
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
        - !Ref DataUtilsLayer
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: Park Sites GET lambda function
      Environment:
        Variables:
          TABLE_NAME: !Ref TableNameRegister
          LOG_LEVEL: info
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNameRegister
      Events:
        ParkSitesGet:
          Type: Api
          Properties:
            Path: /parks/{identifier}/sites
            Method: GET
            RestApiId: !Ref ApiDeployment
        ParkSitesOptions:
          Type: Api
          Properties:
            Path: /parks/{identifier}/sites
            Method: OPTIONS
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  # Get sites by park id
  SiteGet:
    FunctionName: SiteGet
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/sites/_identifier/GET
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Sites by Park Id GET lambda function
      Environment:
        Variables:
          TABLE_NAME: !Ref TableNameRegister
          LOG_LEVEL: info
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNameRegister
      Events:
        SiteGet:
          Type: Api
          Properties:
            Path: /sites/{identifier}
            Method: GET
            RestApiId: !Ref ApiDeployment
        SitesByParkIdOptions:
          Type: Api
          Properties:
            Path: /sites/{identifier}
            Method: OPTIONS
            RestApiId: !Ref ApiDeployment
            Auth:
              ApiKeyRequired: false
              Authorizer: NONE
              OverrideApiAuth: true

  SitePut:
    FunctionName: SitePut
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/sites/_identifier/PUT
      Handler: index.handler
      Layers:
        - !Ref BaseLayer
        - !Ref AWSUtilsLayer
        - !Ref DataUtilsLayer
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Site PUT lambda function
      Environment:
        Variables:
          TABLE_NAME: !Ref TableNameRegister
          LOG_LEVEL: info
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNameRegister
      Events:
        ParkNamePut:
          Type: Api
          Properties:
            Path: /sites/{identifier}
            Method: PUT
            RestApiId: !Ref ApiDeployment

Outputs:
  #   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  #   # Find out more about other implicit resources you can reference within SAM
  #   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ApiDeployment:
    Description: 'API Gateway endpoint URL for Stage for Config function'
    Value: !Sub 'https://${ApiDeployment}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/config/'
  OpenSearch:
    Description: 'OpenSearch Domain Endpoint'
    Value: !Sub
      - 'https://${Domain}/'
      - Domain: !GetAtt OpenSearchSecondary.DomainEndpoint
